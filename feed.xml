<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://codememo.lakruzz.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codememo.lakruzz.com/" rel="alternate" type="text/html" /><updated>2025-07-12T16:38:16+00:00</updated><id>https://codememo.lakruzz.com/feed.xml</id><title type="html">Continuous Delivery Metric Model</title><subtitle>Continuous Delivery Metric Model</subtitle><author><name>Lars Kruse</name></author><entry><title type="html">The Full Assessment</title><link href="https://codememo.lakruzz.com/stories/the-full-assessment/" rel="alternate" type="text/html" title="The Full Assessment" /><published>2024-01-23T00:00:00+00:00</published><updated>2024-06-06T00:00:00+00:00</updated><id>https://codememo.lakruzz.com/stories/the-full-assessment</id><content type="html" xml:base="https://codememo.lakruzz.com/stories/the-full-assessment/"><![CDATA[<p><img src="/assets/images/pics/ws-0003.jpg" alt="image-center" class="align-center" width="50%" /></p>

<p class="kicker">This model <a href="/about-model">originates</a> from the time when I founded and operated Praqma. In this post, I’ll describe how I conducted this Continuous Delivery Metric Assessment at more then 25 companies</p>

<p>The name and concept “Continuous Delivery” is a deliberate reference to a lean or TPS inspired approach often used in manufacturing which takes offset in a one-piece flow that strives for quality built into the product as opposed to glued on - after it’s done.</p>

<p>In the modern world of software development we use the concepts <em>Continuous Delivery</em> and <em>DevOps</em> to be the equivalents in software to what lean means to manufacturing.</p>

<p>We strive for <em>Lean Software Development</em>.</p>

<h2 id="value-stream-mapping---the-as-is-picture">Value Stream Mapping - the <em>as-is</em> picture</h2>

<p>In Lean manufacturing there is a strict focus on Product Lifecycle Management – in software our focus is on Software Development Lifecycle Management (SDLC).</p>

<p>As in lean, we investigate and assess three different core phenomena that jeopardize an ideal delivery value stream:</p>

<ul>
  <li><strong>Muda</strong>: Wastefulness – things and processes that are excess, which don’t contribute to value.</li>
  <li><strong>Muri</strong>: Unevenness – inefficient coordination of <em>takt</em> and workflows that build up stock or create wait-states.</li>
  <li><strong>Mura</strong>: Overburdenness – bad utilization of resources, scope creep and poor prioritization</li>
</ul>

<p>Just as in a lean process we get the first impression of the current state from an engaging workshop exercise based on a Value Stream Mapping technique. We gather team members and stakeholders and facilitate them to draw a rich picture of the current (as-is) process. We mark the waste, the back-loops, the wait states, the excess manual processes, the communication conflicts etc.</p>

<p>The Value Stream Mapping exercise’s overall purpose is to understand current workflow and most importantly map lead times. We map the DORA metrics; Deployment Frequency, Mean Lead Time for Changes, Mean Time to Recovery, Change Failure Rate and reliability.</p>

<p>I’ve gathered a handful af pictures from some of the workshops and the first pile is from the initial part of the session where we do a Value Stream Map. It’s a <em>rich picture</em> we draw on the wall, everyone involved in the process has a pen, and we’re mapping what exactly goes on while the software is produced, validated and shipped.</p>

<figure class="third ">
  
    
      <a href="/assets/images/pics/ws-0003.jpg" title="Everyone is contributing to the Value Stream Mapping process">
          <img src="/assets/images/pics/ws-0003.jpg" alt="placeholder image 3" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0002.jpg" title="Image 2 title caption">
          <img src="/assets/images/pics/ws-0002.jpg" alt="placeholder image 2" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0010.jpg" title="Image 10 title caption">
          <img src="/assets/images/pics/ws-0010.jpg" alt="placeholder image 10" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0011.jpg" title="Image 11 title caption">
          <img src="/assets/images/pics/ws-0011.jpg" alt="placeholder image 11" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0018.jpg" title="Image 18 title caption">
          <img src="/assets/images/pics/ws-0018.jpg" alt="placeholder image 18" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0023.jpg" title="Image 23 title caption">
          <img src="/assets/images/pics/ws-0023.jpg" alt="placeholder image 23" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0024.jpg" title="Image 24 title caption">
          <img src="/assets/images/pics/ws-0024.jpg" alt="placeholder image 24" />
      </a>
    
  
  
    <figcaption>The workshop starts with mapping out the Value Stream of the product as <em>rich pictures</em> laid our on the walls
</figcaption>
  
</figure>

<p>When the Value Stream begins to take form we introduce the <em>trouble markers</em> which the participants use to mark where the process needs to be optimization in six different categories of troubles:</p>

<p><img src="/assets/images/troubles.png" alt="image-center" class="align-center" width="50%" /></p>

<ul>
  <li><strong>Manual Work</strong> - dull, repetitive work done my humans</li>
  <li><strong>Queues</strong> - processes where <em>takt</em> is off due to lack of resources</li>
  <li><strong>Wait states</strong> - processes where flow is broken - often during handovers. Tasks are dropped between chairs. What is important to someone is unimportant to someone else</li>
  <li><strong>Conflicts</strong> - parties fighting each other, serving different and contradicting agendas</li>
  <li><strong>Unplanned work</strong> - prioritization and systemic approach is soo poorly adapted, that plans fall apart all the time. It’s fire fighting</li>
  <li><strong>Needs repair</strong> - Processes are adapted to a certain situation, but the world has moved on. These processes needs to be updated</li>
</ul>

<h2 id="some-board-examples">Some board examples</h2>

<figure class="third ">
  
    
      <a href="/assets/images/pics/ws-0007.jpg" title="Image 7 title caption">
          <img src="/assets/images/pics/ws-0007.jpg" alt="placeholder image 7" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0022.png" title="Image 22 title caption">
          <img src="/assets/images/pics/ws-0022.png" alt="placeholder image 22" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0019.jpg" title="Image 19 title caption">
          <img src="/assets/images/pics/ws-0019.jpg" alt="placeholder image 19" />
      </a>
    
  
  
    <figcaption>The mappings show the troubles in the process and and all the painful back-loops
</figcaption>
  
</figure>

<p>When the Value stream is mapped and assessed we ask the team to prepare a walk-through of what goes on in the board. One person will start in the upper left corner and explain all the processes, troubles, connection, and back-loops.</p>

<p>It’s very seldom that there exists such <em>one</em> person that has the full overview of the entire process. During the walk-through new team members will have to take over. Most often <em>no one</em> grasps the full picture.</p>

<figure class="third ">
  
    
      <a href="/assets/images/pics/ws-0025.jpg" title="Image 25 title caption">
          <img src="/assets/images/pics/ws-0025.jpg" alt="placeholder image 25" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0004.jpg" title="Image 4 title caption">
          <img src="/assets/images/pics/ws-0004.jpg" alt="placeholder image 4" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0026.jpg" title="Image 26 title caption">
          <img src="/assets/images/pics/ws-0026.jpg" alt="placeholder image 26" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0016.jpg" title="Image 16 title caption">
          <img src="/assets/images/pics/ws-0016.jpg" alt="placeholder image 16" />
      </a>
    
  
  
    <figcaption>The mappings show the troubles in the process and and all the painful back-loops
</figcaption>
  
</figure>

<h2 id="the-goal---get-the-full-picture">The Goal - get the full picture?</h2>

<p>The Dreyfus brothers published a model for skill acquisition which contributed to the field of Cognitive Science as early as in the 80’s to propose an early model for understanding intelligence and expertise.  This has inspired us to build a model, not necessarily – or not just – for maturity, but also for in-depth metrics.</p>

<p>In Continuous Delivery in context of software development we focus on different areas of knowledge or matter; Build, Test, Version control, DevOps, Architecture &amp; Design and Organization &amp; Culture. These areas can be molded and adapted to the individual client and assessment.</p>

<p>After the Value Stream mapping session we present <a href="/">the model</a> and ask the team to score each card from a miraculous point of view:</p>

<blockquote>
  <p><em>Imagine that the principle described on the card was fully implemented in your process. How much would it affect <a href="/gauges/">throughput, feedback and payback</a> — and how complex would the implementation be</em></p>
</blockquote>

<p>The model suggests different approaches, techniques, tools or principles, which represent different levels of expertise and proficiency. We use the model to conduct a facilitated discussion with the team and stakeholders. Through this workshop we will debate every single card and assess how relevant this capability is in context of the quality of the product and the Software Development Lifecycle.</p>

<p>So we spread out in smaller teams and each team picks up a couple of cards of their own choice. Each card is scored for effect and cost of implementation. The processes continues until all cards are scored and assessed. The team must agree and debate the scores to get to some level on consensus.</p>

<h2 id="scoring-the-cards-in-the-model">Scoring the cards in the model</h2>

<figure class="third ">
  
    
      <a href="/assets/images/pics/ws-0001.jpg" title="Image 1 title caption">
          <img src="/assets/images/pics/ws-0001.jpg" alt="placeholder image 1" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0005.jpg" title="Image 5 title caption">
          <img src="/assets/images/pics/ws-0005.jpg" alt="placeholder image 5" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0006.jpg" title="Image 6 title caption">
          <img src="/assets/images/pics/ws-0006.jpg" alt="placeholder image 6" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0009.jpg" title="Image 9 title caption">
          <img src="/assets/images/pics/ws-0009.jpg" alt="placeholder image 9" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0012.jpg" title="Image 12 title caption">
          <img src="/assets/images/pics/ws-0012.jpg" alt="placeholder image 12" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0013.jpg" title="Image 13 title caption">
          <img src="/assets/images/pics/ws-0013.jpg" alt="placeholder image 13" />
      </a>
    
  
    
      <a href="/assets/images/pics/ws-0014.jpg" title="Image 14 title caption">
          <img src="/assets/images/pics/ws-0014.jpg" alt="placeholder image 14" />
      </a>
    
  
  
    <figcaption>The workshop starts with mapping out the Value Stream of the product
</figcaption>
  
</figure>

<p>This concludes the first day of the Value Steam Mapping - and Card scoring workshops.</p>

<h2 id="observations--digging-in-the-dirt">Observations – digging in the dirt</h2>

<p>Next stage is to get our fingers into the dirt and have various team members explain and demonstrate some of the tools and processes that we identify as a special point of interest. These sessions will be scheduled when we have the overview established from the initial workshops, so we can say for sure what these points of special interests are but typically we would do a combination of code inspections, static analysis, review tool utilizations, and we will study and observe the team’s common ways of working, branching strategies, deliveries, deploys, monitoring etc.</p>

<h2 id="lean-coffee-workshops">Lean Coffee Workshops</h2>

<p>To prepare ourselves to go into solution mode and enable us to suggest a feasible and realistic roadmap towards the end goal we will organize a series of “lean coffee workshop” - typically one in each area in the model – and whatever else is needed. In these workshops we will invite team members and stakeholders with special expertise in the field.</p>

<p>A lean coffee workshop is a special workshop format that allows participants to help build that agenda of the workshop dynamically in such a way that dire problems or issues take higher priority. For each discussion topic we will facilitate that we capture:</p>

<ul>
  <li>The root cause problem</li>
  <li>A possible (maybe more) solution to mitigate it</li>
  <li>The value each identified solution would yield to SDLC or product quality</li>
</ul>

<p>The findings are then recorded and presented as a detailed and customized note on each card - see card <a href="/automated-builds/">“Automated Builds”</a> as an example (these are real finding from some of the assessments, but anonymized and used here to serve as examples). Also notice on the <a href="/automated-builds/">“Automated Builds”</a> card, that the scoring from the workshop is captured. The score is 7 and <a href="/gauges/">complexity is categorized</a> as <em>a group effort</em>.</p>

<h2 id="the-report">The report</h2>

<p>This concludes our onsite effort – from here we will take the elicited intelligence home to discuss internally among ourselves and we will write up a report and propose a prioritized list of all findings in. It’s a quite comprehensive report that can serve as a roadmap or backlog for the work ahead.</p>

<p>The report will include an executive summary.</p>

<p>If you are interested the model score, the findings and the prioritized recommendations can be delivered to you as a static website; your one version of the website that your’re currently at, which you can host securely on your own corporate inside – for every stakeholder to browse and reference.</p>

<p>This framework and model are inspired by lean principles, cognitive science, DORA metrics and DevOps and agile culture. Lars Kruse has been the lead on the development of this model and approach and has conducted more then 25 assessments based on this framework including:</p>

<p class="kicker">Grundfos, Danfoss, Universal Robots, Volvo, Terma, Brüel &amp; Kjær Sound &amp; Vibration, Atmel (now Microchip), ATP, Alm. Brand, 3Shape, TetraPak, Novelda, Yxlon International, Oticon, Kamstrup, Napatech, Schneider Electrics, Schlumberger, Cryptera, DR, BK Ultrasound.</p>]]></content><author><name>Lars Kruse</name></author><summary type="html"><![CDATA[Continuous Delivery is to software development what lean is to manufacturing. We strive for Lean Software Development. A one-piece flow with quality built-in.]]></summary></entry><entry><title type="html">Git aliases</title><link href="https://codememo.lakruzz.com/stories/git-aliases-extreme/" rel="alternate" type="text/html" title="Git aliases" /><published>2021-04-07T00:00:00+00:00</published><updated>2021-04-07T00:00:00+00:00</updated><id>https://codememo.lakruzz.com/stories/git-aliases-extreme</id><content type="html" xml:base="https://codememo.lakruzz.com/stories/git-aliases-extreme/"><![CDATA[<p class="kicker">Git aliases are mostly used for nifty shorthand variants or combinations of existing git commands. But aliases can do anything that you can fit into one line - literally. This also makes them fun bash scripting exercises - and inconceivably powerful.</p>

<p>This blog contains quite a few git tricks, tips and even a recommended automated GitOps workflow. It’s specifically detailed in terms of git aliases and utilization of git config. I’ve provided a short Table of Content so you can prepare for what’s coming.</p>

<h2 id="aliases">Aliases</h2>

<p>Good git aliases are like collectors items. They are one-liners, that makes your life (the git related part of it) much easier. They are literally one line statements. Here’s a short classical example:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config alias.co <span class="s1">'checkout'</span>
</code></pre></div></div>

<p>Now I can run <code class="language-plaintext highlighter-rouge">git co</code> as a shorthand substitute for <code class="language-plaintext highlighter-rouge">git checkout</code> This is a very popular use of git aliases - it saves me six chars every time I want to checkout a branch.</p>

<h2 id="tab-completion">Tab completion</h2>

<p>Tab completion is another nifty git feature worth mentioning when the talk is on optimizing your flow in git. In some git distributions it works out of the box, in others it needs <a href="https://stackoverflow.com/questions/12399002/how-to-configure-git-bash-command-line-completion" target="_blank" title="How to configure git bash command line completion">a bit of tweaking</a> to be ignited. What it does is simply, that it finishes your git commands for you. If you type the beginning of a git command and then hit <code class="language-plaintext highlighter-rouge">&lt;tab&gt;</code> it will toggle through the options you have and when you found the one you like you hit <code class="language-plaintext highlighter-rouge">&lt;enter&gt;</code>.</p>

<p>If I use tab completion then it turns our that I had no need for the <code class="language-plaintext highlighter-rouge">co</code> shorthand for <code class="language-plaintext highlighter-rouge">checkout</code> that I just created; I could already checkout with the same amount of key strokes (6): <code class="language-plaintext highlighter-rouge">git co&lt;enter&gt;</code> = <code class="language-plaintext highlighter-rouge">git c&lt;tab&gt;&lt;enter&gt;</code>.</p>

<p><em>“OK! No revolution yet, but hang on a bit, it gets wilder”</em></p>

<h2 id="git-config">Git config</h2>

<p>A word on the <code class="language-plaintext highlighter-rouge">git config</code> command too: It’s essentially nothing but an in-line ini-file editor/reader of what is in your git configuration files. Git comes with knowledge of three system files; one is <em>local</em> (default) and resides in the repository: <code class="language-plaintext highlighter-rouge">/.git/config</code> another one is <em>global</em> and is in your user home folder: <code class="language-plaintext highlighter-rouge">~/.gitconfig</code>, and the last one is <em>system</em> and sits in the <code class="language-plaintext highlighter-rouge">/etc/gitconfig</code> folder (I’m using *nix style locations - <a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config" target="_blank">get an in-depth understanding of config files here</a>).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--local</span>  ...  <span class="c">#writes to .git/config in the .git folder 'underneath' your repository</span>
git config <span class="nt">--global</span> ...  <span class="c">#writes to ~/.gitconfig on your PC</span>
git config <span class="nt">--system</span> ...  <span class="c">#writes to /etc/gitconfig on your PC</span>
</code></pre></div></div>

<p>So looking at the consequences of the previous <code class="language-plaintext highlighter-rouge">git config</code> command that created the alias it ended up in the <code class="language-plaintext highlighter-rouge">.git/config</code> file in the repository that was in the path when I executed it looking like this:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[alias]</span>
  <span class="py">co</span> <span class="p">=</span> <span class="s">checkout</span>
</code></pre></div></div>

<p>…In fact could just have hacked that file directly in my editor, changes will take effect instantly when you save the file - I often find myself editing the config files more often than using <code class="language-plaintext highlighter-rouge">git config</code>.</p>

<h2 id="stepping-it-up-a-bit">Stepping it up a bit</h2>

<p>So let’s find a more useful use of aliases - check this next one. I’m storing useful - but hard to remember - git command (scroll the code block to the right - it’s long!)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> alias.tree <span class="s1">'log --graph --full-history --all --color --date=short --pretty=format:"%Cred%x09%h %Creset%ad%Cblue%d %Creset %s %C(bold)(%an)%Creset"'</span>
</code></pre></div></div>

<p><em>“Really! That looks complicated!”</em></p>

<p>Well yes, and no. This is a brilliant example of how aliases really are useful.</p>

<p>The built-in <code class="language-plaintext highlighter-rouge">log</code> feature has some beautiful display features, and using the <code class="language-plaintext highlighter-rouge">--pretty</code> switch you can draw ASCII art trees of your branches and commits that really are - well artful. But no one wants to write, or even remembers, this relatively complicated <code class="language-plaintext highlighter-rouge">format:</code> string. Now I’ve created an alias called <code class="language-plaintext highlighter-rouge">tree</code> which since then has become my personal all time favorite git command.</p>

<p>And here’s a few bonuses: First: The tab completion feature has built-in knowledge of my aliases. so <code class="language-plaintext highlighter-rouge">git tr&lt;tab&gt;</code> will expand into <code class="language-plaintext highlighter-rouge">git tree</code> and second: Since the <code class="language-plaintext highlighter-rouge">tree</code> command is a variant of the <code class="language-plaintext highlighter-rouge">log</code> command it still supports all the switches that <code class="language-plaintext highlighter-rouge">log</code> does. As an example; <code class="language-plaintext highlighter-rouge">log</code> supports the switch <code class="language-plaintext highlighter-rouge">-&lt;number&gt;</code> to limit the depth of the log to <code class="language-plaintext highlighter-rouge">&lt;number&gt;</code> items. So my <code class="language-plaintext highlighter-rouge">tree</code> command also supports <code class="language-plaintext highlighter-rouge">-&lt;number&gt;</code> out of the box. To see my git tree 32 commits deep I’ll execute:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tree <span class="nt">-32</span>
</code></pre></div></div>

<p>…and get:</p>

<div class="pic caption pic center full">
  
  
  <a href="/assets/images/posts/git_tree_32.png">
    
    <img src="/assets/responsive/1020/git_tree_32.png" srcset="/assets/responsive/255/git_tree_32.png 255w,/assets/responsive/510/git_tree_32.png 510w,/assets/responsive/1020/git_tree_32.png 1020w," alt="Git commit history as ASCII art" class="pic pic center full" /></a>What you see is the history, 32 commits deep, in the repository that holds the website you are reading. it shows my commit SHA1s, the dates, the branches, the tags, the commit messages and the committers - exactly one line per commit. I don't have many branches in my repo; Since I minimize work in progress and always release from <code>master</code>, but if there were a pile of branches, they would have shown in ASCII art to the left. Tree is now a pretty cool alternative to plain <code>git log -32</code> and even an alternative to some of the graphical interface <code>gitk</code>.   (click image to open full-size in a new tab)</div>

<h2 id="git-aliases-vs-git-extensions">Git aliases vs git extensions</h2>

<p>An alternative to git aliases are git extensions. They behave very much the same way. A git extension is merely an executable - usually a script - that is made accessible from your <code class="language-plaintext highlighter-rouge">$PATH</code> and which follows the naming convention that it must be prefixed with <code class="language-plaintext highlighter-rouge">git-</code> so if I create the script <code class="language-plaintext highlighter-rouge">git-co</code> like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/bash</span>
git checkout <span class="nv">$@</span>
</code></pre></div></div>

<p>And put it in <code class="language-plaintext highlighter-rouge">/usr/local/bin</code> - which is already in my <code class="language-plaintext highlighter-rouge">$PATH</code> - then I get the exact same result: <code class="language-plaintext highlighter-rouge">git co</code> is now shorthand for <code class="language-plaintext highlighter-rouge">git checkout</code>. And even git extensions are also automatically supported by tab completion, so as a git user, you wouldn’t know the difference if it was implemented one way or another.</p>

<p><em>“OK, then why do we have both?”</em></p>

<p>Well because one is light-weight and the other can hold unlimited amount of complex code. A git alias is limited to one line, that is; It can potentially contain more then one statement (I’ll show you in a bit), but it can not span more than one line. It’s literally a one-liner.</p>

<p>An extension is used when you want to extend git, not just with nifty shorthand variants and cute tricks, but entire landscapes of new features. Git’s graphical display tool called <code class="language-plaintext highlighter-rouge">gitk</code> is really a quite extensive (12K+ lines of code) executable called <a href="https://github.com/git/git/blob/master/gitk-git/gitk" target="_blank" title="See it on GitHub"><code class="language-plaintext highlighter-rouge">git-gitk</code></a> written in Tcl/Tk.</p>

<h2 id="taking-aliases-to-the-next-level">Taking aliases to the next level</h2>

<p>Let me introduce a nifty feature: <em>Full support of semantic versioning in all your git repositories</em> that might seem quite complex, something that would require a full-blown git extension (and there are quite a handful of them out there on the internet, which proves that the feature is popular and useful) but which turn out, can be actually be implemented in just two lines of code, and stored as aliases.</p>

<p><em>“No! Really?”</em><br />
<em>“Yes! Really!”</em></p>

<h2 id="implementing-support-for-semantic-versioning">Implementing support for Semantic Versioning</h2>

<div class="fact right medium">
<h2>SemVer Basics</h2>

<p />It's essentially a naming convention, a protocol, in which you define version numbers in three levels of integers separated by dots:

<p /><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>

<p />Then you play by the <a href="https://semver.org" target="_blank">SemVer rules</a> which goes as follows: When you make a new release, you bump one of the three levels. The semantical meaning of the three levels are as follows: <em>Major</em> is bumped if your release has features that breaks backward compatibility (e.g. a function that used to return a string now returns an integer). A bump of <em>Minor</em> also indicates that your release contains new features, but that they are backward compatible (e.g. the original function that returned a string is untouched, instead a new one is added, which returns an integer). And finally a bump in <em>patch</em> indicates that no new features were added, only bugfixes or enhancements to existing ones.

<p />Another rule in semantic versioning is that if you bump a level, then all other lower levels are reset to zero using <code>1.2.3</code> as an example:

<p />Bumping <em>major</em> in <code>1.2.3</code> becomes <code>2.0.0</code>.<br />
Bumping <em>minor</em> in <code>1.2.3</code> becomes <code>1.3.0</code>.<br />
Bumping <em>patch</em> in <code>1.2.3</code> becomes <code>1.2.4</code>.

<p />SemVer's obvious use case is in versioning interfaces or individual component releases, where the protocol lays the foundation of programmatically determining wether or not it's safe to update a given component or not. SemVer is the most important tool in the toolbox, when striving to kill the a bloated monolith system compound into multiple nimble individual component releases.
</div>

<p>I will not make this blog about Semantic Versioning (<a href="https://semver.org" target="_blank" title="Semantic Versioning">SemVer</a>) in general, but specifically about how to implement it in just two lines of code, using git aliases. So I assume that you’re familiar with the concept - if not read up on it in the short recap in the fact-box.</p>

<p>It’s my belief, that a good workflow is one that is simple and easy to use. Sometimes workflows aren’t simple and easy to use, and in context of git and git related workflows (e.g. GitOps) git aliases (…and git extensions) are a brilliant and obvious way to simplify a workflow so that every team member has a few everyday git favorite git commands which are shared among every team member, and essentially implement the workflow - nice and easy. So before getting to work, I’ll just set the scene and put a few words on the workflow I use and advocate.</p>

<h3 id="i-assume-the-following">I assume the following</h3>

<ul class="no_toc">
  <li>I’m working in a <a href="https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows#_centralized_workflow" target="_blank" title="From the Git Book">Centralized Distributed Workflow</a> This is typically the case for all team using a git-as-a-Service platforms (mine is GitHub but <em>any</em> will do).</li>
  <li>The repository has a declarative pipeline defined which monitors certain events in the centralized repository (mine is in Circle CI but <em>any</em> will do).</li>
  <li>The declarative pipeline implements “GitOps” That is; When <em>something</em> happens in git, then stuff is automatically verified, promoted or deployed. I have three actions/levels in my repos:
    <ol>
      <li><strong>Ready:</strong> Any new commit that arrives on a branched prefixed with <code class="language-plaintext highlighter-rouge">ready/</code> is automatically rebased against  <code class="language-plaintext highlighter-rouge">master</code> and verified. If the verification is successful it’s automatically merged (guaranteed to be fast-forward, since it’s already rebased) to <code class="language-plaintext highlighter-rouge">master</code></li>
      <li><strong>Master:</strong> Any new commit that reaches the <code class="language-plaintext highlighter-rouge">master</code> branch is automatically verified - and if flawless - deployed to the stage environment.</li>
      <li><strong>SemVer:</strong> Any commit that is tagged according to <em>SemVer</em> rules is automatically verified and deployed to the production environment.</li>
    </ol>
  </li>
</ul>

<blockquote>
  <p>WTF! - No Pull Requests?
<!-- cspell:ignore bdgm BDFL --></p>
</blockquote>

<p>It’s worth noticing that in my workflow I don’t use pull requests. The reason is really that while the generic concept of a <em>Pull Request (PR)</em> undoubtedly exists, it is nevertheless implemented differently in <a href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests" target="_blank" title="GitHub believes the world stops spinning if you don't use PR!">GitHub</a>, <a href="https://docs.gitlab.com/ee/user/project/merge_requests/" target="_blank" title="GitLab calls them 'Merge Requests'">GitLab</a>, <a href="https://www.atlassian.com/git/tutorials/making-a-pull-request" target="_blank" title="Atlassian has it too!">BitBucket</a>, <a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests" target="_blank" title="...and (often) last: Microsoft does what everyone else does">Azure DevOps</a>, each in its own proprietary implementation. And on top of that  PR’s were originally designed, to support a <a href="https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows#_dictator_and_lieutenants_workflow" target="_blank" title="From the Git Book"><em>Benevolent Dictator Governance Model (BDGM)</em></a> in which only the <a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life" target="_blanks" title="Benevolent Dictator For Life - OSS term">Benevolent Dictator For Life (BDFL)</a> and the trusted lieutenants have write (push) access, and all other contributors were potentially seen as riff-raff and they would have read (pull) access - but not write access. To contribute they would then have to <em>fork</em> or <em>branch</em> the code, make the code suggestions and then place a <em>Pull Request</em> with one of the trusted lieutenants, who would then read and validate the code for your, and if accepted then <em>they</em> would pull it in. Quite a cumbersome and manual process. And in the light of the fact that in most of todays git repositories, all contributors already have write access, it seems like it’s an obvious thing to optimize.</p>

<p>Let’s have a look at what a pull request is <em>generically</em> and why it may have survived and remained popular in many teams despite almost no one today works in a Benevolent Dictator Governance Model anymore. Generically, a PR is implemented as a short-lived temporary branch related to a specific increment (task) that needs some level of verification before merged into another branch - usually <code class="language-plaintext highlighter-rouge">master</code>. This is no different than the flow I advocate, where we say, that any code change must be done on a separate short-lived branch and only accepted into <code class="language-plaintext highlighter-rouge">master</code> if quality measures are sufficiently met. So consequently, my <code class="language-plaintext highlighter-rouge">ready/</code> branch is <em>like</em> a pull request, It’s simply a way to signal to my automated GitOps backend that I’m ready to take the test and see if my code is worthy of being integrated onto <code class="language-plaintext highlighter-rouge">master</code>. The advantage I get is that I’m only git native features - in this case simply a dedicated short-lived branch and a self-made naming convention. So consequently my setup is compliant with any Distributed Centralized Git repository strategy - including all the popular git-aaS-platform mentioned earlier.</p>

<blockquote>
  <p>Nah! You’re missing out on reviews!</p>
</blockquote>

<p>Yes, since I’ve taken PR’s out of the equation what I often get is: <em>“Hey, you can’t do that, what about peer reviews then?”</em></p>

<p>And it’s true that in most teams <em>Pull Requests</em> are associated with, or sometimes even a synonym to, <em>code reviews</em>. But in my world - if a code review is required - then it’s performed directly on the short lived issue branch - all the different git-aaS-platforms have perfect built-in support for annotated reviews. It’s easy! And it has the desired side-effect that getting an extra set of eyes on the code in the development process turns it into a collaboration process among peers. And remember: Peers are equals! They are not supposed to be each others gate-keepers. The flow I advocate has a sent of <em>paired programming</em> among peers or the same flow can be used in a lean <a href="https://en.wikipedia.org/wiki/Senpai_and_k%C5%8Dhai" target="_blank" title="Lean inspired master/apprentice relation">Senpai and kōhai</a> inspired relation where a <em>master</em> takes responsibility for an <em>apprentice</em>.</p>

<p>The choice to ditch reviews as quality gates and to only use native git commands as opposed to proprietary implementations of Pull Requests has to do with my general admiration of the concept of <em>lean</em> and <em>automation.</em> A review, regardless if it’s done by a peer or a mentor, can’t possibly be automated, since it requires a reel persons sincere opinion. Essentially this makes the review belong to a validation process as opposed to a verification process. For that reason it can not possibly become part of the process that’s supposed to run automatically - as it would inevitably introduce a wait state - an in lean processes waiting is considered waste. I’m not adding waste to my flow - I’m removing it!</p>

<h3 id="my-workflow-is-simply-workon-and-deliver">My workflow is simply <code class="language-plaintext highlighter-rouge">workon</code> and <code class="language-plaintext highlighter-rouge">deliver</code></h3>

<p class="no_toc">When a task is assigned to me (I’ll use issue #34 as an example), I create a shot-lived branch for the task and implement my solution. The way I do this is to run <code class="language-plaintext highlighter-rouge">git workon 34</code> but that’s because I’m using <a href="https://github.com/code-cafes/git-phlow" target="_blank" title="Git Phlow">a git extension</a> that supports <code class="language-plaintext highlighter-rouge">git workon</code> I’ll leave that for a later blog post. I’t essentially roughly the same as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout master
git pull
git checkout <span class="nt">--track</span> origin/master <span class="nt">-b</span> 34-my-short-lived-issue-branch
</code></pre></div></div>

<p>I’m now on branch <code class="language-plaintext highlighter-rouge">34-my-short-lived-issue-branch</code> and I then start hacking my solution. If I need feedback or an OK from a peer or a mentor before I can deliver to the automated pipeline then I’ll commit with a  mention of my colleague and push is to the centralized repository (<code class="language-plaintext highlighter-rouge">origin</code>) - like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s2">"Hey @DenverCoder32 - please look at his"</span>
git push origin 34-my-short-lived-issue-branch
</code></pre></div></div>

<p>If I’m on any of the popular git-aaS-platforms - then the mention of my colleague in the commit message will trigger that she gets a notification with a link to the commit, and she can go and annotated her comments or review on my commit, exactly as if it was one of the proprietary pull request implementations.</p>

<p>When I’ve gotten the feedback from my peer or mentor - or if I don’t need it - then I deliver to the automated pipeline simply by pushing the branch again - I have a git extension installed allowing me to do <code class="language-plaintext highlighter-rouge">git deliver</code> it will simply prepend the branch with <code class="language-plaintext highlighter-rouge">ready/</code> in the push process - it plays roughly something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin 34-my-short-lived-issue-branch ready/34-my-short-lived-issue-branch
</code></pre></div></div>

<p>The name <code class="language-plaintext highlighter-rouge">ready/</code> triggers my pipeline. If all is well then the rest is really as automated - and boring to watch - as a washing machine wash.</p>

<p>Using Circle CI as an example, here’s how my pipeline is defined:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="pi">-</span> <span class="na">deliver</span><span class="pi">:</span>
    <span class="na">requires</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">prep-repo</span>
      <span class="pi">-</span> <span class="s">jekyll-build</span>
    <span class="na">filters</span><span class="pi">:</span>
      <span class="na">branches</span><span class="pi">:</span>
        <span class="na">only</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">/ready\/.*/</span>
<span class="pi">-</span> <span class="na">stage-deploy</span><span class="pi">:</span>
    <span class="na">requires</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">prep-repo</span>
      <span class="pi">-</span> <span class="s">jekyll-build</span>
      <span class="pi">-</span> <span class="s">html-proofer</span>
    <span class="na">filters</span><span class="pi">:</span>
      <span class="na">branches</span><span class="pi">:</span>
        <span class="na">only</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">/master/</span>
<span class="pi">-</span> <span class="na">prod-deploy</span><span class="pi">:</span>
    <span class="na">requires</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">prep-repo</span>
      <span class="pi">-</span> <span class="s">jekyll-build</span>
      <span class="pi">-</span> <span class="s">html-proofer</span>
    <span class="na">filters</span><span class="pi">:</span>
      <span class="na">branches</span><span class="pi">:</span>
        <span class="na">ignore</span><span class="pi">:</span> <span class="s">/._/</span>
      <span class="na">tags</span><span class="pi">:</span>
        <span class="na">only</span><span class="pi">:</span> <span class="s">/^._\d+\.\d+\.\d+.*$/</span> <span class="c1"># Contains a Semantic Version number</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>In case you’re not that familiar with Circle CI but are more proficient in one of the many other declarative pipeline technologies I’ll give you a quick run-down of what’s going on in the YAML snippet above so you can do something similar in GitHub Actions, Azure Pipelines, GitLab CI, Jenkins - or <em>whatever</em> declarative pipeline you are using - they all support something similar.</p>

<p>I have defined three alternative paths in my flow. All stages apparently do the same two steps to begin with (lines 3+4, 11+12 and 20+21). <code class="language-plaintext highlighter-rouge">prep-repo</code> rebase from and then fast-forward merges the commit into <code class="language-plaintext highlighter-rouge">master</code> if it isn’t there already and generates a <code class="language-plaintext highlighter-rouge">version.txt</code> file, which I can include in the release. It then caches the repo on Circle CI infrastructure for potential reuse. <code class="language-plaintext highlighter-rouge">jekyll-build</code> builds the static website with Jekyll and caches only the derived HTML - that is the result not the source - again for potential reuse. The results from these various stages are cashed with reference to the SHA1 of the commit, so if I re-run the same commit, the two stages are reused rather than replayed.</p>

<p>In addition to <code class="language-plaintext highlighter-rouge">prep-repo</code> and <code class="language-plaintext highlighter-rouge">jekyll-build</code> the two deploy stages also requires a flawless <code class="language-plaintext highlighter-rouge">html-proofer</code> (lines 13+22).</p>

<p>The <code class="language-plaintext highlighter-rouge">deliver</code> flow is triggered only by branches that are prefixed with <code class="language-plaintext highlighter-rouge">ready/</code> (lines 6-8). The <code class="language-plaintext highlighter-rouge">stage-deploy</code> flow is trigger only by the <code class="language-plaintext highlighter-rouge">master</code> branch (lines 15-17) and finally then <code class="language-plaintext highlighter-rouge">prod-deploy</code> stage is triggered not by branches, but only tags that contains a SemVer pattern (lines 24-27).</p>

<p>So the <code class="language-plaintext highlighter-rouge">ready/</code> branch from before triggered the <code class="language-plaintext highlighter-rouge">deliver</code> flow, which ended up merging onto <code class="language-plaintext highlighter-rouge">master</code> which then in turn triggered the <code class="language-plaintext highlighter-rouge">stage-deploy</code> flow, which reused the prep and build and in addition checked for dead links and if successful automatically deployed to my stage environment, which is a real-time live production-like environment.</p>

<p>This is my own website, but had it been a product with a customer/product owner who needed to validate before deploying to production, then I could point them to the updated stage environment and wait for their approval and simply set a SemVer tag and push it. It could look like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag <span class="nt">-a</span> <span class="nt">-m</span> <span class="s2">"Making a patch bump on 1.2.3"</span> v1.2.4
git push <span class="nt">--tags</span>
</code></pre></div></div>

<p>This would trigger the <code class="language-plaintext highlighter-rouge">prod-deploy</code> workflow - which would again reuse the prep and build steps and then deploy to production being the website you’re reading now.</p>

<h3 id="and-this-is-where-i-now-need-a-tool-to-help-me">And this is where I now need a tool to help me</h3>

<div class="pic caption right small no_toc">
  
  
    <img src="/assets/responsive/255/semver_tags.png" srcset="/assets/responsive/255/semver_tags.png 255w," alt="List SemVer tags in repo" class="pic right small" />When I run the <code>git tag</code> command it lists all the tags I have in my repo - but I'm really only interested in one with the highest SemVer value.</div>

<p>To get my next SemVer tag, regardless of what level I want to bump, I need to know the previous level. I do:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag
</code></pre></div></div>

<p>And I would then seek out the one with the highest SemVer value - in this case it would be <code class="language-plaintext highlighter-rouge">1.2.4</code> which I can tell from the rather inconsistent use of naming in tag <code class="language-plaintext highlighter-rouge">version_1.2.4_some_comment</code>. What really could be helpful would be a <code class="language-plaintext highlighter-rouge">git semver</code> command which simply replies <code class="language-plaintext highlighter-rouge">1.2.4</code>.</p>

<p>It turns out that this is quite easy to get from a shell command like This:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag | <span class="nb">grep</span> <span class="nt">-Eo</span> <span class="s1">'\d\.\d\.\d'</span> | <span class="nb">sort</span> | <span class="nb">tail</span> <span class="nt">-1</span><span class="p">;</span>
</code></pre></div></div>

<p>OK, not very complicated, but still complicated enough to be cumbersome to type each time I need it.</p>

<h2 id="storing-bash-scripts-as-one-line-git-aliases---using-closures">Storing bash scripts as one-line git aliases - using closures</h2>

<p>If the alias expansion is <a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-alias" target="_blank" title="From the git config manual page">prefixed with an exclamation point</a>, it will be treated as a shell command.</p>

<p>So I could create a <code class="language-plaintext highlighter-rouge">semver</code> alias like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> alias.semver <span class="s2">"</span><span class="se">\!</span><span class="s2">git tag | grep -Eo '</span><span class="se">\d</span><span class="s2">+</span><span class="se">\.\d</span><span class="s2">+</span><span class="se">\.\d</span><span class="s2">+' | sort | tail -1"</span>
</code></pre></div></div>

<p>But git aliases also automatically passes an any parameter to the execution. This is sometimes desired, as we saw in the <code class="language-plaintext highlighter-rouge">tree</code> alias previously, where the switch supported by <code class="language-plaintext highlighter-rouge">git log</code> was also automatically supported by <code class="language-plaintext highlighter-rouge">git tree</code>.</p>

<p>But sometimes it’s not desired - sometimes I don’t accept parameters or switches, and I want them to be swallowed or ignored and sometimes (as you’ll see later) I want to pass parameters or switches to the alias itself, not it’s execution.</p>

<p>So the <code class="language-plaintext highlighter-rouge">semver</code> implementation above would mean that an execution like <code class="language-plaintext highlighter-rouge">git semver some_rubbish_parameter</code> would make it fail, whereas I would like the rubbish parameter to be ignored.</p>

<p>The trick to achieve this is instead of defining the execution, we define a function, that does the execution, and then we execute the function - a trick that’s know as a <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" title="Closure (in programming)">closure</a>. This way we get to manipulate or investigate any input before it’s unconditionally executed</p>

<p>The closure construct in bash looks like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#template</span>
f<span class="o">()</span> <span class="o">{</span>statement-1<span class="p">;</span> statement-2<span class="p">;</span> ...<span class="p">;</span> statement-n<span class="p">;</span> <span class="o">}</span><span class="p">;</span> f

<span class="c"># semver as closure</span>
f<span class="o">()</span> <span class="o">{</span> git tag | <span class="nb">grep</span> <span class="nt">-Eo</span> <span class="s1">'\d+\.\d+\.\d+'</span> | <span class="nb">sort</span> | <span class="nb">tail</span> <span class="nt">-1</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span> f
</code></pre></div></div>
<!-- cspell:ignore Aaarh -->
<p>But before we store it, let’s consider, what happens if there aren’t any SemVer tags set yet, if we’re the first developer here. Aaarh! <em>Nothing</em> is returned, so <code class="language-plaintext highlighter-rouge">bumpsemver</code> has nothing to bump. Let’s fix that. Some teams wants to start the SemVer with <code class="language-plaintext highlighter-rouge">0.0.0</code> others with <code class="language-plaintext highlighter-rouge">0.9.0</code> or <code class="language-plaintext highlighter-rouge">1.0.0</code>. Let’s store the team’s <code class="language-plaintext highlighter-rouge">initial</code> preference in the config file in a new section called <code class="language-plaintext highlighter-rouge">[semver]</code>`- something like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> semver.initial 0.0.0
</code></pre></div></div>

<p>And then let <code class="language-plaintext highlighter-rouge">semver</code> return that if the <code class="language-plaintext highlighter-rouge">grep</code> command doesn’t catch anything. OK! One down - <code class="language-plaintext highlighter-rouge">git semver</code> is in the box - it ended up like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--file</span> <span class="sb">`</span>git root<span class="sb">`</span>/.gitconfig alias.semver   <span class="s2">"</span><span class="se">\!</span><span class="s2">f() { SEMVER=</span><span class="se">\`</span><span class="s2">git tag | grep -Eo '</span><span class="se">\\</span><span class="s2">d+</span><span class="se">\\</span><span class="s2">.</span><span class="se">\\</span><span class="s2">d+</span><span class="se">\\</span><span class="s2">.</span><span class="se">\\</span><span class="s2">d+' | sort | tail -1</span><span class="se">\`</span><span class="s2">; if [ '_' == _</span><span class="se">\$</span><span class="s2">SEMVER ]; then echo </span><span class="se">\`</span><span class="s2">git config --get semver.initial</span><span class="se">\`</span><span class="s2">; else echo </span><span class="se">\$</span><span class="s2">SEMVER; fi; }; f"</span>
<span class="c"># &gt;&gt; Scroll to the right - it's long &gt;&gt;</span>
</code></pre></div></div>

<p>Now it always gives me the current SemVer, regardless of how inconsistently I named my tags. And if there’s no match I gets the number from the config and returns that .</p>

<h2 id="getting-a-bit-ugly---adding-support-for-parameters-and-switches">Getting a bit ugly - adding support for parameters and switches</h2>

<p>Next up is a <code class="language-plaintext highlighter-rouge">git bumpsemver</code> command which I’d like to take one of three possible switches, indicating which level to bump. I would then like it to type out - but not execute - the command that I would use to  the next SemVer label. Having it type out rather than execute it means that it would always be safe to (test) run the command, and If I like it, I can just rerun it inside an <code class="language-plaintext highlighter-rouge">eval $( ...)</code> construct.</p>

<p>As show in one of the previous examples, when I set my SemVer tags I always make them annotated and I always provide a message, usually I mention what the previous SemVer was - so keep a bit of history something like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag <span class="nt">-a</span> <span class="nt">-m</span> <span class="s2">"minor bump on 1.2.3"</span> v1.3.0
</code></pre></div></div>

<p>But others might want to apply their own messages. So my decision is, that I need <code class="language-plaintext highlighter-rouge">git bumpsemver</code> to take an additional but optional parameter, which will become the message to <code class="language-plaintext highlighter-rouge">-m</code>. If no message is applied, then <code class="language-plaintext highlighter-rouge">bumpsemver</code> should automatically generate something similar to the example above.</p>

<p>I’ve also seen many software teams prefix their SemVer with <code class="language-plaintext highlighter-rouge">v</code> or <code class="language-plaintext highlighter-rouge">ver</code> like <code class="language-plaintext highlighter-rouge">v1.3.0</code> or <code class="language-plaintext highlighter-rouge">ver1.3.0</code> so I wan’t to have support for that too. I’ll create a <code class="language-plaintext highlighter-rouge">prefix</code> setting for this and put it in the in <code class="language-plaintext highlighter-rouge">semver</code> section. So if you want a prefix <code class="language-plaintext highlighter-rouge">v</code> it should be set like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> semver.prefix v
</code></pre></div></div>

<p>Which would total the <code class="language-plaintext highlighter-rouge">semver</code> section in the config file to look like this:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[semver]</span>
  <span class="py">inital</span> <span class="p">=</span> <span class="s">0.0.0</span>
  <span class="py">prefix</span> <span class="p">=</span> <span class="s">v</span>
</code></pre></div></div>

<p>And finally, on top of everything, I’d like the alias to be so clever, that if I execute it wrongly, it does nothing wrong, but instead it just shows a nice and short instruction on how to use it correctly something like:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git bumpsemver
Usage: git bumpsemver  <span class="nt">--major</span>|--minor|--patch <span class="o">[</span>msg]

Generates the git <span class="nb">command </span>to run. If you omit
the <span class="o">[</span>msg] a clever one will be generated <span class="k">for </span>you.
To execute it run it <span class="k">in </span>an <span class="nb">eval</span> <span class="si">$(</span>...<span class="si">)</span> like this example:

<span class="nb">eval</span> <span class="si">$(</span>git bumpsemver <span class="nt">--minor</span> <span class="s2">"this will be the comment"</span><span class="si">)</span>
</code></pre></div></div>

<p>That’s what I want, nothing more, nothing less. All in just one line of code - as a git alias.</p>

<p>It’s not as daunting a task as it seems. First I’ll lay it out as it looks in a neat bash closure, and then we’ll weed out the new-lines and escape whatever needs to be escape for persistent file storage. I give you <code class="language-plaintext highlighter-rouge">git bumpsemver</code> dressed up as a closure:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>f<span class="o">(){</span>
  <span class="nv">PREFIX</span><span class="o">=</span><span class="si">$(</span>git config <span class="nt">--global</span> <span class="nt">--get</span> semver.prefix<span class="si">)</span><span class="p">;</span>
  <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="se">\"</span><span class="nv">$2</span><span class="se">\"</span> <span class="o">]</span><span class="p">;</span>
    <span class="k">then </span><span class="nv">MSG</span><span class="o">=</span><span class="s2">"-m </span><span class="se">\"</span><span class="nv">$1</span><span class="s2"> bump on </span><span class="sb">`</span>git semver<span class="sb">`</span><span class="se">\"</span><span class="s2">"</span><span class="p">;</span>
    <span class="k">else </span><span class="nv">MSG</span><span class="o">=</span><span class="s2">"-m  </span><span class="se">\"</span><span class="nv">$2</span><span class="se">\"</span><span class="s2">"</span><span class="p">;</span>
  <span class="k">fi</span><span class="p">;</span>
  <span class="nv">levels</span><span class="o">=(</span><span class="sb">`</span><span class="nb">echo</span> <span class="se">\$</span><span class="o">(</span>git semver<span class="o">)</span> | <span class="nb">tr</span> <span class="s1">'.'</span> <span class="s1">' '</span><span class="sb">`</span><span class="o">)</span><span class="p">;</span>
  <span class="k">if</span> <span class="o">[</span> <span class="s1">'_--major'</span> <span class="o">==</span>_<span class="nv">$1</span> <span class="o">]</span><span class="p">;</span>
    <span class="k">then </span><span class="nb">echo </span>git tag <span class="nt">-a</span> <span class="nv">$MSG</span> <span class="nv">$PREFIX</span><span class="k">$((${</span><span class="nv">levels</span><span class="p">[0]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span>.0.0<span class="p">;</span>
  <span class="k">elif</span> <span class="o">[</span> <span class="s1">'_--minor'</span> <span class="o">==</span> _<span class="nv">$1</span> <span class="o">]</span><span class="p">;</span>
    <span class="k">then </span><span class="nb">echo </span>git tag <span class="nt">-a</span> <span class="nv">$MSG</span> <span class="nv">$PREFIX</span><span class="k">${</span><span class="nv">levels</span><span class="p">[0]</span><span class="k">}</span>.<span class="k">$((${</span><span class="nv">levels</span><span class="p">[1]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span>.0<span class="p">;</span>
  <span class="k">elif</span> <span class="o">[</span> <span class="s1">'_--patch'</span> <span class="o">==</span> _<span class="nv">$1</span> <span class="o">]</span><span class="p">;</span>
    <span class="k">then </span><span class="nb">echo </span>git tag <span class="nt">-a</span> <span class="nv">$MSG</span> <span class="nv">$PREFIX</span><span class="k">${</span><span class="nv">levels</span><span class="p">[0]</span><span class="k">}</span>.<span class="k">${</span><span class="nv">levels</span><span class="p">[1]</span><span class="k">}</span>.<span class="k">$((${</span><span class="nv">levels</span><span class="p">[2]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span><span class="p">;</span>
    <span class="k">else </span><span class="nb">echo</span> <span class="s1">'Usage: git bumpsemver  --major|--minor|--patch [msg]\n
      Generates the git command to run. If you omit
      the [msg] a clever one will be generated for you.
      To set the tag run bumpsemver inside an eval $(...) like this example:
          eval \$(git bumpsemver --minor \"this will be the comment\")'</span><span class="p">;</span>
  <span class="k">fi</span><span class="p">;</span>
<span class="o">}</span><span class="p">;</span>
f<span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>There’s quite a few cheap bash tricks in play here - so if you are curious to what happens I’ll walk you through it.</p>

<p><strong>Line 2:</strong> As mentioned earlier, <code class="language-plaintext highlighter-rouge">git config</code> is also a reader. So the script simply reads whats in the file <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> file.</p>

<p><strong>Lines 3-5:</strong> The <code class="language-plaintext highlighter-rouge">-z</code> switch to the file test is <code class="language-plaintext highlighter-rouge">TRUE</code> if the variable is <em>not</em> defined. If <em>no</em> messages is applied then a default one is generated, if a message is given then it overrides the default message - mentioning the current SemVer level by reusing the <code class="language-plaintext highlighter-rouge">git semver</code> alias.</p>

<p><strong>Line 7:</strong> <code class="language-plaintext highlighter-rouge">tr</code> replaces dots with spaces - and returns an array. <code class="language-plaintext highlighter-rouge">tr</code> splits on spaces so <code class="language-plaintext highlighter-rouge">1.2.4</code> becomes a three item array <code class="language-plaintext highlighter-rouge">[1][2][4]</code> and an arrays is what is needed in (lines 9, 11 &amp; 13). Also notice, that <code class="language-plaintext highlighter-rouge">bumpsemver</code> is reusing the <code class="language-plaintext highlighter-rouge">semver</code> alias.</p>

<p><strong>Lines 8,10 and 12:</strong> A dummy <code class="language-plaintext highlighter-rouge">_</code> char is added in the comparison on both sides, otherwise the script would fail if no parameters were applied - comparing something to noting, and we want that failure to be a friendly usage statement in line 14.</p>

<p><strong>Lines 9,11 and 13:</strong> Type casting <code class="language-plaintext highlighter-rouge">$levels</code> with <code class="language-plaintext highlighter-rouge">${...}</code> allows us to access the array items. And type casting the sting to an integer using <code class="language-plaintext highlighter-rouge">s((...))</code> allows us to use arithmetic operators, so we can increment the level.</p>

<p>Now let’s wrap this up - it’s a bit ugly, but we have to fit it onto one line - be warned:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> alias.bumpsemver <span class="s2">"</span><span class="se">\!</span><span class="s2">f(){ PREFIX=</span><span class="se">\$</span><span class="s2">(git config --global --get semver.prefix); if [ -z </span><span class="se">\"\$</span><span class="s2">2</span><span class="se">\"</span><span class="s2"> ]; then MSG=</span><span class="se">\"</span><span class="s2">-m </span><span class="se">\\\"\$</span><span class="s2">1 bump on </span><span class="se">\`</span><span class="s2">git semver</span><span class="se">\`\"\\\"</span><span class="s2">; else MSG=</span><span class="se">\"</span><span class="s2">-m  </span><span class="se">\\\"\$</span><span class="s2">2</span><span class="se">\\\"\"</span><span class="s2">; fi; levels=(</span><span class="se">\`</span><span class="s2">echo </span><span class="se">\$</span><span class="s2">(git semver) | tr '.' ' '</span><span class="se">\`</span><span class="s2">); if [ '_--major' == _</span><span class="se">\$</span><span class="s2">1 ]; then echo git tag -a </span><span class="se">\$</span><span class="s2">MSG </span><span class="se">\$</span><span class="s2">PREFIX</span><span class="se">\$</span><span class="s2">((</span><span class="se">\$</span><span class="s2">{levels[0]}+1)).0.0; elif [ '_--minor' == _</span><span class="se">\$</span><span class="s2">1 ]; then echo git tag -a </span><span class="se">\$</span><span class="s2">MSG </span><span class="se">\$</span><span class="s2">PREFIX</span><span class="se">\$</span><span class="s2">{levels[0]}.</span><span class="se">\$</span><span class="s2">((</span><span class="se">\$</span><span class="s2">{levels[1]}+1)).0; elif [ '_--patch' == _</span><span class="se">\$</span><span class="s2">1 ]; then echo git tag -a </span><span class="se">\$</span><span class="s2">MSG </span><span class="se">\$</span><span class="s2">PREFIX</span><span class="se">\$</span><span class="s2">{levels[0]}.</span><span class="se">\$</span><span class="s2">{levels[1]}.</span><span class="se">\$</span><span class="s2">((</span><span class="se">\$</span><span class="s2">{levels[2]}+1)); else echo 'Usage: git bumpsemver  --major|--minor|--patch [msg]</span><span class="se">\n\n</span><span class="s2">Generates the git command to run. If you omit</span><span class="se">\n</span><span class="s2">the [msg] a clever one will be generated for you.</span><span class="se">\n</span><span class="s2">To execute it run it in an eval </span><span class="si">$(</span>...<span class="si">)</span><span class="s2"> like this example:</span><span class="se">\n\n</span><span class="s2">    eval </span><span class="se">\$</span><span class="s2">(git bumpsemver --minor </span><span class="se">\"</span><span class="s2">this will be the comment</span><span class="se">\"</span><span class="s2">)'; fi;  }; f"</span>
<span class="c"># &gt;&gt; scroll - it's very loooong &gt;&gt;</span>
</code></pre></div></div>

<h2 id="git-config-team-collaboration---fixing-the-missing-level-in-git-config">Git Config team collaboration - fixing the missing level in git config</h2>

<p>OK, now I’ve given you an handful of useful git aliases, and <code class="language-plaintext highlighter-rouge">git config</code> settings. Now it would be nice, if everyone on the team, had these settings and aliases, then we would know that every team member was doing the same thing. As a team lead I could ask everyone  to execute all the commands that would set these aliases. Or distribute a script that did it, but I admit, that the commands are delicate, they are not even white-space tolerant, the removal of just one tiny white-space might render the alias useless. And personally I favour the principle of <em>Configuration as Code</em>  which mean that I would much rather distribute and version control a config file, as opposes to a script that sets the config file.</p>

<p>But there is kind of a missing level in the whole git config story. <code class="language-plaintext highlighter-rouge">--system</code> and <code class="language-plaintext highlighter-rouge">--global</code> levels are on the developers own PC and out of reach for version control. <code class="language-plaintext highlighter-rouge">--local</code> is in the repository’s <code class="language-plaintext highlighter-rouge">.git</code> folder which is kinda <em>underneath</em> it all and not included in the version control and general <code class="language-plaintext highlighter-rouge">clone</code>, <code class="language-plaintext highlighter-rouge">pull</code>, <code class="language-plaintext highlighter-rouge">push</code>, <code class="language-plaintext highlighter-rouge">branch</code> scope.</p>

<p>I kinda miss a fourth level in the whole <code class="language-plaintext highlighter-rouge">git config</code> setup, something like <code class="language-plaintext highlighter-rouge">--repo</code> that would get and set from a file <code class="language-plaintext highlighter-rouge">.gitconfig</code> which was located in the root of the repository, and then could be version controlled together with the rest of the team’s files.</p>

<p>And then I need <code class="language-plaintext highlighter-rouge">git config</code> to include this new fourth repo level in the equation.</p>

<p>First part is easy to achieve since the <code class="language-plaintext highlighter-rouge">git config</code> already supports that I can use the <code class="language-plaintext highlighter-rouge">--file</code> switch to write to any other file. So I could do something like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--file</span> &lt;repository-root&gt;/.gitconfig alias.co checkout
</code></pre></div></div>

<p>Hmmm, looks like all I need now is a generic way to get the repository root, something like <code class="language-plaintext highlighter-rouge">git root</code>. Such a git command doesn’t exist, but I can get the root with <code class="language-plaintext highlighter-rouge">git rev-parse --show-toplevel</code> and I can easily make it a <code class="language-plaintext highlighter-rouge">git root</code> command if I want:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> alias.root <span class="s1">'rev-parse --show-toplevel'</span>
</code></pre></div></div>

<p>Second part is to include the new config file in the git config hierarchy so it’s settings comes into play, I can use the <code class="language-plaintext highlighter-rouge">include</code> directive supported by <code class="language-plaintext highlighter-rouge">git config</code> it’s not 100% ideal, since I would have to put the include in <em>one</em> of the three default config files, and as discussed none of them are version controlled but it will work. Relative paths in the <code class="language-plaintext highlighter-rouge">include</code> directive takes off-set in the location of the config file itself, the <code class="language-plaintext highlighter-rouge">--system</code> and <code class="language-plaintext highlighter-rouge">--global</code> levels can’t really act as generic in regards of the repository location, as I may have cloned the repos to <em>anywhere</em> on my hard drive. So for this reason it turns out that the <code class="language-plaintext highlighter-rouge">--local</code> level has one advantage over the two other, as it always sits <em>underneath</em> the repository which mean that the repository level <code class="language-plaintext highlighter-rouge">.gitconfig</code> is always in the parent directory, relative to the local config file (remember it’s in the repository’s <code class="language-plaintext highlighter-rouge">.git/config</code>). So every git repository on earth, regardless of where it cloned to, has a valid <code class="language-plaintext highlighter-rouge">--local</code> include path that looks - like this.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--local</span> include.path ./../.gitconfig
</code></pre></div></div>

<p>So if the team distributes their shared aliases and config settings in general in a <code class="language-plaintext highlighter-rouge">.gitconfig</code> in the root of the repository, where they probably already have all the other config files they share. Then the git config command above would then be <em>the only command</em> I would require for all teammates to run the same settings. Using the <em>local</em> level implies that it must be included and set in every repository. So the final alias I give you is one that reads everything in the repo’s <code class="language-plaintext highlighter-rouge">.gitconfig</code> and pours it into the <code class="language-plaintext highlighter-rouge">--global</code> and essentially make them all your own. It actually work as intended, since the local level is read last, and the include level is read as the very last. So any updates your team makes in the repo, would take precedent over your global ones. I’ve made the alias safe, so it won’t update your global settings if the are already defined.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> alias.repo-config-to-global <span class="s2">"!f(){ for f in </span><span class="si">$(</span>git config <span class="nt">--file</span> <span class="sb">`</span>git root<span class="sb">`</span>/.gitconfig <span class="nt">--list</span> <span class="nt">--name-only</span><span class="si">)</span><span class="s2">; do git config --global --get </span><span class="nv">$f</span><span class="s2"> &gt; /dev/null || git config --global </span><span class="nv">$f</span><span class="s2"> "</span><span class="si">$(</span>git config <span class="nt">--file</span> <span class="sb">`</span>git root<span class="sb">`</span>/.gitconfig <span class="nt">--get</span> <span class="nv">$f</span><span class="si">)</span><span class="s2">"; done; }; f"</span>
</code></pre></div></div>

<p>If you want to use <code class="language-plaintext highlighter-rouge">git repo-config-to-global</code> to update existing settings, you do it by deleting them first and reapplying them from the one in the repository:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>setting <span class="k">in</span> <span class="si">$(</span>git config <span class="nt">--file</span> <span class="sb">`</span>git root<span class="sb">`</span>/.gitconfig <span class="nt">--list</span> <span class="nt">--name-only</span><span class="si">)</span><span class="p">;</span> <span class="k">do </span>git config <span class="nt">--global</span> <span class="nt">--unset</span> <span class="nv">$setting</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span>
git rep-config-to-global
<span class="c"># &gt;&gt; Scroll to the right - it's long &gt;&gt;</span>
</code></pre></div></div>

<h2 id="all-in-all---the-final-config-file">All in All - the final config file</h2>

<p>It ended up like this:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[alias]</span>
  <span class="py">tree</span> <span class="p">=</span> <span class="s">log --graph --full-history --all --color --date=short --pretty=format:</span><span class="se">\"</span><span class="s">%Cred%x09%h %Creset%ad%Cblue%d %Creset %s %C(bold)(%an)%Creset</span><span class="se">\"</span>
  <span class="py">semver</span> <span class="p">=</span> <span class="s">"!f() { SEMVER=`git tag | grep -Eo '</span><span class="se">\\</span><span class="s">d+</span><span class="se">\\</span><span class="s">.</span><span class="se">\\</span><span class="s">d+</span><span class="se">\\</span><span class="s">.</span><span class="se">\\</span><span class="s">d+' | sort | tail -1`; if [ '_' == _$SEMVER ]; then echo `git config --get semver.initial`; else echo $SEMVER; fi; }; f"</span>
  <span class="py">bumpsemver</span> <span class="p">=</span> <span class="s">"!f(){ PREFIX=$(git config --global --get semver.prefix); if [ -z </span><span class="se">\"</span><span class="s">$2</span><span class="se">\"</span><span class="s"> ]; then MSG=</span><span class="se">\"</span><span class="s">-m </span><span class="se">\\\"</span><span class="s">$1 bump on `git semver`</span><span class="se">\"\\\"</span><span class="s">; else MSG=</span><span class="se">\"</span><span class="s">-m  </span><span class="se">\\\"</span><span class="s">$2</span><span class="se">\\\"\"</span><span class="s">; fi; levels=(`echo $(git semver) | tr '.' ' '`); if [ '_--major' == _$1 ]; then echo git tag -a $MSG $PREFIX$((${levels[0]}+1)).0.0; elif [ '_--minor' == _$1 ]; then echo git tag -a $MSG $PREFIX${levels[0]}.$((${levels[1]}+1)).0; elif [ '_--patch' == _$1 ]; then echo git tag -a $MSG $PREFIX${levels[0]}.${levels[1]}.$((${levels[2]}+1)); else echo 'Usage: git bumpsemver  --major|--minor|--patch [msg]</span><span class="se">\\</span><span class="s">n</span><span class="se">\\</span><span class="s">nGenerates the git command to run. If you omit</span><span class="se">\\</span><span class="s">nthe [msg] a clever one will be generated for you.</span><span class="se">\\</span><span class="s">nTo execute it run it in an eval  like this example:</span><span class="se">\\</span><span class="s">n</span><span class="se">\\</span><span class="s">n    eval $(git bumpsemver --minor </span><span class="se">\"</span><span class="s">this will be the comment</span><span class="se">\"</span><span class="s">)'; fi;  }; f"</span>
  <span class="py">root</span> <span class="p">=</span> <span class="s">rev-parse --show-toplevel</span>
  <span class="py">repo-config-to-global</span> <span class="p">=</span> <span class="s">"!f(){ for f in $(git config --file `git root`/.gitconfig --list --name-only); do git config --global --get $f &gt; /dev/null || git config --global $f </span><span class="se">\"</span><span class="s">$(git config --file `git root`/.gitconfig --get $f)</span><span class="se">\"</span><span class="s">; done; }; f"</span>
<span class="nn">[semver]</span>
  <span class="py">prefix</span> <span class="p">=</span> <span class="s">v</span>
  <span class="py">initial</span> <span class="p">=</span> <span class="s">0.0.0</span>
</code></pre></div></div>

<h2 id="how-to-install">How to install</h2>

<p>You have options:</p>

<h2 id="copy-to-config-file">Copy to config file</h2>

<ol>
  <li>Simply copy the content from <a href="https://raw.githubusercontent.com/lakruzz/semver_git_alias/main/.gitconfig" target="_blank" title="Most recent version of the file on github">the final config file</a> shown above into your own - into your own config file</li>
</ol>

<h2 id="run-from-terminal">Run from terminal</h2>

<ol>
  <li>Clone my <code class="language-plaintext highlighter-rouge">lakruzz/semver_git_alias</code> repo</li>
  <li>Change directory to be inside the repo</li>
  <li>Include the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file from the repo</li>
  <li>Pour them into you own <em>global</em> level</li>
</ol>

<p>Copy and run theses four lines:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/lakruzz/semver_git_alias.git
<span class="nb">cd </span>semver_git_alias
git config <span class="nt">--local</span> include.path ./../.gitconfig
git repo-config-to-global
</code></pre></div></div>

<p>I’ve put everything in a small git repository <a href="https://github.com/lakruzz/semver_git_alias" target="_blank" title="Git Extreme Aliases"><code class="language-plaintext highlighter-rouge">lakruzz/semver_git_alias</code></a>. If you have any comments or want to share some of your own git aliases, then let’s chat up using the <a href="https://github.com/lakruzz/semver_git_alias/issues" target="_blank" title="lakruzz/semver_git_alias Issues">GitHub issues</a>.</p>]]></content><author><name>Lars Kruse</name></author><category term="git" /><category term="gitops" /><category term="semver" /><summary type="html"><![CDATA[Git aliases are mostly used for nifty shorthand variants or combinations of existing git commands. But aliases can do anything that you can fit into one line - literally. This also makes them fun bash scripting exercises and inconceivably powerful.]]></summary></entry><entry><title type="html">The DORITH principle</title><link href="https://codememo.lakruzz.com/stories/the-dorith-principle/" rel="alternate" type="text/html" title="The DORITH principle" /><published>2018-02-03T00:00:00+00:00</published><updated>2018-02-03T00:00:00+00:00</updated><id>https://codememo.lakruzz.com/stories/the-dorith-principle</id><content type="html" xml:base="https://codememo.lakruzz.com/stories/the-dorith-principle/"><![CDATA[<p class="kicker">DORITH is a contraction of sentence “DO the RIght THing”. It’s a principle that enables you to make decisions that will appear to be tactical and still allow you to learn as you go. Understand the in-situ challenge with  being tactical and start taking small steps in the right direction.</p>

<h2 id="vision-strategy-and-tactics-yadda-yadda-yadda">Vision, strategy and tactics …yadda, yadda, yadda</h2>

<p>It’s well know, that in management and leadership, the terms <em>vision</em>, <em>strategy</em> and <em>tactics</em> are as old as Methuselah. And all though the correlation between the terms and the way they are used does make a lot of sense - in management. It’s also one of those doctrines, that kinda make us immune, isn’t it? When a manager says <em>“Vision, strategy and tactics”</em> we tend to roll our eyes and think <em>“yadda yadda yadda - talk to the hand”</em>.</p>

<h2 id="the-in-situ-problem-with-being-tactical">The in-situ problem with being tactical</h2>

<p><img src="/assets/images/posts/dorith.jpg" alt="DORITH" class="pic left medium" /> I’ve been managing people, for ten years now, and from that point of view it really does seem to be important to ensure, that the everyday work is tactically founded in a strategy that leads to fulfillment of the vision. However, it only makes sense to <em>think</em> like that, it doesn’t make much sense to <em>talk</em> like that.</p>

<p>Here’s an example; When someone walks up to me and ask for advice or priority or mentoring in relation to something very specific that they are currently occupied with. Then it doesn’t make much sense to reply <em>“be tactical about it”</em> although that is technically not a bad reply at all. In reality however, it’s very rare that it resonates with something concrete. It’s usually quite abstract what <em>tactical</em> is in the given context.</p>

<p>Another problem with that technically correct, but in-situ fairly useless reply, is that it ties back to the strategy; Being tactical implies <em>“…according to the strategy”</em> and even worse - being strategic likewise implies <em>“…according to the vision”</em>.</p>

<p>Damn - that means, that as a manager, I need to have a rock solid and well communicated <em>vision</em>, that is manifested in an equally rock solid and well communicated <em>strategy</em> - The truth is, that in <a href="https://www.praqma.com" target="_blank">our company</a>, these strategies are not manifested or rock solid, it’s more that we strive to build them into our corporate culture and that we’re allowing them to be somewhat in flux.</p>

<p>Without these strategies and employee handbooks, I can understand why the encouragement to be <em>tactical</em> leads to the immediate <em>“yadda, yadda, yadda”</em>  thought.</p>

<h2 id="the-agile-manifesto">The Agile manifesto</h2>

<p>It may derive from an occupational hazard; We’re in the software development business and the <a href="https://agilemanifesto.org" target="_blank">agile manifesto</a> tends to be our credo. We honestly believe in motivated and self-organized teams, we believe in meritocracy and we acknowledge that requirements are constantly changing, we believe in technical excellence and in the focus that comes from minimizing work in progress - and we believe in retrospectives and continuous reflections as the primary input for continuous learning. We believe that creating value - such as working software - should be the primary measure of progress.</p>

<p>To me - as a manager who tends to recite from <a href="https://agilemanifesto.org/principles.html" target="_blank">the twelve principles</a> of the Agile Manifesto more frequently than most - the whole vision-strategy-tactics needs a different implementation than the traditional rock solid, well communicated approach.</p>

<p>I simply don’t believe in rock solid.</p>

<h2 id="dorith">DORITH</h2>

<p>The DORITH principle is a different approach. When someone walks up to me and asks for advice, priority or mentoring I tend to reply:</p>

<blockquote>
  <p><em>“Do the right thing!”</em></p>
</blockquote>

<p>I feel obliged to not dictate the answer, but instead facilitate that we go and investigate; what is the right thing to do - in the context?</p>

<p>In any context, the right thing to do will obviously be relative to some kind of direction. An obviously good coaching question pops up:</p>

<blockquote>
  <p><em>“What are you hoping to achieve?”</em></p>
</blockquote>

<p>Whatever the answer to the question is, it something worth dwelling with for a while, Is it the real thing? What is the rationale behind it? <em>Rationale</em> - that word is one of my all time favorites. It’s definition is <em>“A set of reasons or a logical basis for a course of action or belief”</em>. Back in my time at university when I studied communication I studied with a professor in Philosophy. He’s interpretation of the word was much more poetic: <em>“A person’s rationale is all the ballast that enables that person to resonate, to make decisions”</em>. It’s personal!</p>

<p>So by digging into the underlying, personal rationale, behind why someone is doing something, it suddenly becomes meaningful - to that person.</p>

<p>The answer to your own question lies within your self: You make the right decision, given the context, based on your rationale. - it reads like a poem:</p>

<blockquote>
  <p>What you don’t have<br />
You don’t need it now<br />
What you don’t know<br />
You can feel somehow<br /></p>
</blockquote>

<p><em>U2, A Beautiful Day</em></p>

<h2 id="small-steps-manifesto">Small Steps Manifesto</h2>

<p>It’s obvious that a few lines from a U2 pop song can’t hold a magical answer to a complex problem; how to be a successful manger. But I believe that efficient management implies that people on the team are self-organized, motivated and empowered.</p>

<p>The small steps manifesto is still emerging, but it reads something like:</p>

<blockquote>
  <p><em>Any</em> decision that is conscious and based on a rationale, and which is bringing you one small step closer to what you are hoping to achieve, is by definition a good decision.</p>
</blockquote>

<p>It’s likely that there might be other decisions someone else could have made, that would have been better in the meaning that they would be even more efficient, but they would have the built-in problem, that they wouldn’t be your’s.</p>

<p>The DORITH principle allows you to learn - it allows you to practice that art of decision making. Find the answer inside yourself, based on your own sense of direction and your own rationale and do <em>something</em>.</p>

<p>It simply allows you to be tactical - relative to where you are headed.</p>

<h2 id="pivot-without-mercy-or-guilt">Pivot without mercy or guilt</h2>

<p>Making decisions based on your own rationale, however conscious they may be, is bound to have some limitations - for all of us. It’s build into the principle, that some of the decisions will doubtlessly be bad or questionable.</p>

<p>Suck it up!</p>

<p>A proverb that’s often cited in LEAN and agile is <em>“pivot without mercy or guilt”</em>. In it’s essence it captures the remedy for how to deal with bad decision: Simply make another decision. Don’t look back, don’t be sorry. Just make another decision, that’s better.</p>

<p>This of course implies, that we discover when we make bad decisions, and the tools for that are retrospectives and continuous reflections.</p>]]></content><author><name>Lars Kruse</name></author><category term="LEAN" /><category term="agile" /><summary type="html"><![CDATA[DORITH is a contraction of sentence "DO the RIght THing". It's a principle that enables you to make decisions that will appear to be tactical and still allow you to learn as you go.]]></summary></entry></feed>